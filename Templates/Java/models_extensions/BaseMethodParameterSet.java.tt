<# // Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information. #>
<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ include file="BaseJavaModel.template.tt"#>
<#@ output extension="\\" #>
<#host.TemplateName = c.TypeParameterSet();#>
<#=writer.WriteHeader()#>
<#=host.CreatePackageDefinition()#>
<#=TypeHelperJava.ImportClassesOfMethodParametersAsString(c.AsOdcmMethod())#>
<# var importNamespace = host.CurrentModel.GetNamespace().AddPrefix(); #>
import com.google.gson.annotations.Expose;
import com.google.gson.annotations.SerializedName;
import javax.annotation.Nonnull;
import javax.annotation.Nullable;
import com.google.gson.JsonObject;
import <#=importNamespace#>.serializer.ISerializer;
import java.util.EnumSet;
import java.util.ArrayList;

<#=TypeHelperJava.CreateClassDef(c.TypeParameterSet())#>
<#=TypeHelperJava.CreateParameterDef(c.AsOdcmMethod().Parameters)#>
    /**
     * Instiaciates a new <#=c.TypeParameterSet()#>
     */
    public <#=c.TypeParameterSet()#>() {}
    /**
     * Instiaciates a new <#=c.TypeParameterSet()#>
     * @param builder builder bearing the parameters to initialize from
     */
    protected <#=c.TypeParameterSet()#>(@Nonnull final <#=c.TypeParameterSetBuilder()#> builder) {
<# foreach(var parameter in c.AsOdcmMethod().Parameters) {
var parameterName = parameter.ParamName().SanitizePropertyName(parameter).ToLowerFirstChar();
#>
        this.<#=parameterName#> = builder.<#=parameterName#>;
<# } #>
    }
    /**
     * Gets a new builder for the body
     * @return a new builder
     */
    @Nonnull
    public static <#=c.TypeParameterSetBuilder()#> newBuilder() {
        return new <#=c.TypeParameterSetBuilder()#>();
    }
    /**
     * Fluent builder for the <#=c.TypeParameterSet()#>
     */
    public static final class <#=c.TypeParameterSetBuilder()#> {
<# foreach(var parameter in c.AsOdcmMethod().Parameters) { #>
        /**
         * The <#=parameter.ParamName().SanitizePropertyName(parameter).ToLowerFirstChar()#> parameter value
         */
        @Nullable
        protected <#=parameter.ParamType()#> <#=parameter.ParamName().SanitizePropertyName(parameter).ToLowerFirstChar()#>;
        /**
         * Sets the <#=parameter.ParamName().SanitizePropertyName(parameter).ToUpperFirstChar()#>
         * @param val the value to set it to
         * @return the current builder object
         */
        @Nonnull
        public <#=c.TypeParameterSetBuilder()#> with<#=parameter.ParamName().SanitizePropertyName(parameter).ToUpperFirstChar()#>(@Nullable final <#=parameter.ParamType()#> val) {
            this.<#=parameter.ParamName().SanitizePropertyName(parameter).ToLowerFirstChar()#> = val;
            return this;
        }
<# } #>
        /**
         * Instanciates a new <#=c.TypeParameterSetBuilder()#>
         */
        @Nullable
        protected <#=c.TypeParameterSetBuilder()#>(){}
        /**
         * Buils the resulting body object to be passed to the request
         * @return the body object to pass to the request
         */
        @Nonnull
        public <#=c.TypeParameterSet()#> build() {
            return new <#=c.TypeParameterSet()#>(this);
        }
    }
    /**
     * Gets the functions options from the properties that have been set
     * @return a list of function options for the request
     */
    @Nonnull
    public java.util.List<com.microsoft.graph.options.FunctionOption> getFunctionOptions() {
        final ArrayList<com.microsoft.graph.options.FunctionOption> result = new ArrayList<>();
<# foreach(var parameter in c.AsOdcmMethod().Parameters) { #>
        if(this.<#=parameter.ParamName().SanitizePropertyName(parameter).ToLowerFirstChar()#> != null) {
            result.add(new com.microsoft.graph.options.FunctionOption("<#=parameter.ParamName()#>", <#=parameter.ParamName()#>));
        }
<# } #>
        return result;
    }
<#=TypeHelperJava.CreateRawJsonObject(false)#>
    }
}
