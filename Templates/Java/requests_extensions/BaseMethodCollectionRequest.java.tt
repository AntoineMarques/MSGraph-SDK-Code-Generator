<# // Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information. #>
<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ include file="BaseJavaModel.template.tt"#>
<#@ output extension="\\" #>
<#host.TemplateName = c.TypeCollectionRequest();#>
<#=writer.WriteHeader()#>
<#=host.CreatePackageDef()#>

<# var mainNamespace = host.CurrentNamespace(); #>
import <#=mainNamespace#>.<#=TypeHelperJava.GetPrefixForRequests()#>.<#=c.TypeCollectionRequestBuilder()#>;
import <#=mainNamespace#>.<#=TypeHelperJava.GetPrefixForRequests()#>.<#=c.TypeCollectionResponse()#>;
<# if(c.AsOdcmMethod().ReturnType != null && !(c.AsOdcmMethod().ReturnType is OdcmPrimitiveType)) { #>
import <#=mainNamespace#>.<#=c.GetPackagePrefix()#>.<#=(c as OdcmMethod).OdcmMethodReturnType()#>;
<# } #>
<# if (c.AsOdcmMethod().IsAction() && c.AsOdcmMethod().Parameters.Any()) { #>
import <#=mainNamespace#>.<#=c.GetPackagePrefix()#>.<#=c.TypeBody()#>;
<# } #>
<# var importNamespace = host.CurrentModel.GetNamespace().AddPrefix(); #>
import <#=importNamespace#>.options.QueryOption;
import <#=importNamespace#>.core.IBaseClient;
import <#=importNamespace#>.http.BaseCollectionRequest;
import <#=importNamespace#>.concurrency.IExecutors;
import <#=importNamespace#>.http.BaseCollectionPage;

<#=TypeHelperJava.CreateClassDef(c.TypeCollectionRequest(),"BaseCollectionRequest<" + (c as OdcmMethod).OdcmMethodReturnType()+", "+c.TypeCollectionResponse()+">")#>

<# if (c.AsOdcmMethod().IsAction() && c.AsOdcmMethod().Parameters.Any()) { #>

    protected final <#=c.TypeBody()#> body;

<# } #>

    /**
     * The request for this <#=c.TypeName()#>
     *
     * @param requestUrl     the request URL
     * @param client         the service client
     * @param requestOptions the options for this request
     */
    @SuppressWarnings("unchecked")
    public <#=c.TypeCollectionRequest()#>(final String requestUrl, final <#=TypeHelperJava.IBaseClientType()#> client, final java.util.List<? extends <#=importNamespace#>.options.Option> requestOptions) {
<# if (c.AsOdcmMethod().ReturnType != null) { #>
        super(requestUrl, client, requestOptions, <#=(c as OdcmMethod).OdcmMethodReturnType()#>.class, <#=c.TypeCollectionResponse()#>.class, (Class<<#=c.TypeCollectionPage()#>>) (new <#=c.TypeCollectionPage()#>(new java.util.ArrayList<<#=(c as OdcmMethod).OdcmMethodReturnType()#>>(), null).getClass()));
<# } else { #>
        super(requestUrl, client, requestOptions, null);
<# } #>
<# if (c.AsOdcmMethod().IsAction() && c.AsOdcmMethod().Parameters.Any()) { #>
        body = new <#=c.TypeBody()#>();
<# } #>
    }

<# if (c.AsOdcmMethod().IsAction()) { #>

    public void post(final ICallback<? super <#=c.TypeCollectionPage()#>> callback) {
        final IExecutors executors = getBaseRequest().getClient().getExecutors();
        executors.performOnBackground(new Runnable() {
           @Override
           public void run() {
                try {
                    executors.performOnForeground(post(), callback);
                } catch (final ClientException e) {
                    executors.performOnForeground(e, callback);
                }
           }
        });
    }

    public <#=c.TypeCollectionPage()#> post() throws ClientException {
<# if (c.AsOdcmMethod().IsAction() && c.AsOdcmMethod().Parameters.Any()) { #>
        final <#=c.TypeCollectionResponse()#> response = post(body);
<# } else { #>
        final <#=c.TypeCollectionResponse()#> response = super.post(null);
<# } #>
        return buildFromResponse(response);
    }

<# } else { #>

    public void get(final ICallback<? super BaseCollectionPage<<#=(c as OdcmMethod).OdcmMethodReturnType()#>>> callback) {
        final IExecutors executors = getBaseRequest().getClient().getExecutors();
        executors.performOnBackground(new Runnable() {
           @Override
           public void run() {
                try {
                    executors.performOnForeground(get(), callback);
                } catch (final ClientException e) {
                    executors.performOnForeground(e, callback);
                }
           }
        });
    }

    public <#=c.TypeCollectionPage()#> get() throws ClientException {
        final <#=c.TypeCollectionResponse()#> response = send();
        return buildFromResponse(response);
    }

<# } #>

    public BaseCollectionPage<<#=(c as OdcmMethod).OdcmMethodReturnType()#>> buildFromResponse(final <#=c.TypeCollectionResponse()#> response) {
        final <#=c.TypeCollectionRequestBuilder()#> builder;
        if (response.nextLink != null) {
            builder = new <#=c.TypeCollectionRequestBuilder()#>(response.nextLink, getBaseRequest().getClient(), /* options */ null<#=c.MethodPageValues()#>);
        } else {
            builder = null;
        }
        final BaseCollectionPage<<#=(c as OdcmMethod).OdcmMethodReturnType()#>> page = new BaseCollectionPage<<#=(c as OdcmMethod).OdcmMethodReturnType()#>>(response, builder);
        page.setRawObject(response.getSerializer(), response.getRawObject());
        return page;
    }

<# if (c.GetFeatures().CanSelect) { #>
    /**
     * Sets the select clause for the request
     *
     * @param value the select clause
     * @return the updated request
     */
    public <#=c.TypeCollectionRequest()#> select(final String value) {
        addQueryOption(new com.microsoft.graph.options.QueryOption("$select", value));
        return this;
    }

<# } #>
<# if (c.GetFeatures().CanUseTop) { #>
    /**
     * Sets the top value for the request
     *
     * @param value the max number of items to return
     * @return the updated request
     */
    public <#=c.TypeCollectionRequest()#> top(final int value) {
        addQueryOption(new com.microsoft.graph.options.QueryOption("$top", value+""));
        return this;
    }

<# } #>
<# if (c.GetFeatures().CanExpand) { #>
    /**
     * Sets the expand clause for the request
     *
     * @param value the expand clause
     * @return the updated request
     */
    public <#=c.TypeCollectionRequest()#> expand(final String value) {
        addQueryOption(new com.microsoft.graph.options.QueryOption("$expand", value));
        return this;
    }

<# } #>
<# if (c.GetFeatures().CanFilter) { #>
    /**
     * Sets the filter clause for the request
     *
     * @param value the filter clause
     * @return the updated request
     */
    public <#=c.TypeCollectionRequest()#> filter(final String value) {
        addQueryOption(new com.microsoft.graph.options.QueryOption("$filter", value));
        return this;
    }

<# } #>
<# if (c.GetFeatures().CanSort) { #>
    /**
     * Sets the order by clause for the request
     *
     * @param value the order by clause
     * @return the updated request
     */
    public <#=c.TypeCollectionRequest()#> orderBy(final String value) {
        addQueryOption(new com.microsoft.graph.options.QueryOption("$orderby", value));
        return this;
    }

<# } #>
}
