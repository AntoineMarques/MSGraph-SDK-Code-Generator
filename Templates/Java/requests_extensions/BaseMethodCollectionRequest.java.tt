<# // Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information. #>
<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ include file="BaseJavaModel.template.tt"#>
<#@ output extension="\\" #>
<#host.TemplateName = c.TypeCollectionRequest();#>
<#=writer.WriteHeader()#>
<#=host.CreatePackageDef()#>

<# var mainNamespace = host.CurrentNamespace(); #>
import <#=mainNamespace#>.<#=TypeHelperJava.GetPrefixForRequests()#>.<#=c.TypeCollectionRequestBuilder()#>;
import <#=mainNamespace#>.<#=TypeHelperJava.GetPrefixForRequests()#>.<#=c.TypeCollectionResponse()#>;
<# if(c.AsOdcmMethod().ReturnType != null && !(c.AsOdcmMethod().ReturnType is OdcmPrimitiveType)) { #>
import <#=mainNamespace#>.<#=(c as OdcmMethod).ReturnType.GetPackagePrefix()#>.<#=(c as OdcmMethod).OdcmMethodReturnType()#>;
<# } #>
<# if (c.AsOdcmMethod().IsAction() && c.AsOdcmMethod().Parameters.Any()) { #>
import <#=mainNamespace#>.<#=c.GetPackagePrefix()#>.<#=c.TypeBody()#>;
<# } #>
<# var importNamespace = host.CurrentModel.GetNamespace().AddPrefix(); #>
import <#=importNamespace#>.options.QueryOption;
import <#=importNamespace#>.core.IBaseClient;
import <#=importNamespace#>.http.BaseCollectionRequest;
import <#=importNamespace#>.concurrency.IExecutors;

<#=TypeHelperJava.CreateClassDef(c.TypeCollectionRequest(),"BaseCollectionRequest<" + (c as OdcmMethod).OdcmMethodReturnType()+", "+c.TypeCollectionResponse()+", "+c.TypeCollectionPage()+">")#>

<# if (c.AsOdcmMethod().IsAction() && c.AsOdcmMethod().Parameters.Any()) { #>

    /** The body for the method */
    protected final <#=c.TypeBody()#> body;

<# } #>

    /**
     * The request for this <#=c.TypeName()#>
     *
     * @param requestUrl     the request URL
     * @param client         the service client
     * @param requestOptions the options for this request
     */
    public <#=c.TypeCollectionRequest()#>(@Nonnull final String requestUrl, @Nonnull final <#=TypeHelperJava.IBaseClientType()#> client, @Nullable final java.util.List<? extends <#=importNamespace#>.options.Option> requestOptions) {
<# if (c.AsOdcmMethod().ReturnType != null) { #>
        super(requestUrl, client, requestOptions, <#=c.TypeCollectionResponse()#>.class, <#=c.TypeCollectionPage()#>.class, <#=c.TypeCollectionRequestBuilder() #>.class);
<# } else { #>
        super(requestUrl, client, requestOptions, null);
<# } #>
<# if (c.AsOdcmMethod().IsAction() && c.AsOdcmMethod().Parameters.Any()) { #>
        body = new <#=c.TypeBody()#>();
<# } #>
    }

<# if (c.AsOdcmMethod().IsAction()) { #>

    /**
     * Invokes the method and calls the callback with the resulting collection of objects
     * @param callback a callback to be invoked with the resulting collection of objects
     */
    public void post(@Nonnull final ICallback<? super <#=c.TypeCollectionPage()#>> callback) {
        final IExecutors executors = getBaseRequest().getClient().getExecutors();
        executors.performOnBackground(new Runnable() {
           @Override
           public void run() {
                try {
                    executors.performOnForeground(post(), callback);
                } catch (final ClientException e) {
                    executors.performOnForeground(e, callback);
                }
           }
        });
    }

    /**
     * Invokes the method and returns the resulting collection of objects
     * @return a collection of objects returned by the method
     */
    @Nullable
    public <#=c.TypeCollectionPage()#> post() throws ClientException {
<# if (c.AsOdcmMethod().IsAction() && c.AsOdcmMethod().Parameters.Any()) { #>
        final <#=c.TypeCollectionResponse()#> response = post(body);
<# } else { #>
        final <#=c.TypeCollectionResponse()#> response = super.post(null);
<# } #>
        return buildFromResponse(response);
    }

<# } #>

<# if (c.GetFeatures().CanSelect) { #>
    /**
     * Sets the select clause for the request
     *
     * @param value the select clause
     * @return the updated request
     */
    @Nonnull
    public <#=c.TypeCollectionRequest()#> select(@Nonnull final String value) {
        addSelectOption(value);
        return this;
    }

<# } #>
<# if (c.GetFeatures().CanUseTop) { #>
    /**
     * Sets the top value for the request
     *
     * @param value the max number of items to return
     * @return the updated request
     */
    @Nonnull
    public <#=c.TypeCollectionRequest()#> top(final int value) {
        addTopOption(value);
        return this;
    }

<# } #>
<# if (c.GetFeatures().CanExpand) { #>
    /**
     * Sets the expand clause for the request
     *
     * @param value the expand clause
     * @return the updated request
     */
    @Nonnull
    public <#=c.TypeCollectionRequest()#> expand(@Nonnull final String value) {
        addExpandOption(value);
        return this;
    }

<# } #>
<# if (c.GetFeatures().CanFilter) { #>
    /**
     * Sets the filter clause for the request
     *
     * @param value the filter clause
     * @return the updated request
     */
    @Nonnull
    public <#=c.TypeCollectionRequest()#> filter(@Nonnull final String value) {
        addFilterOption(value);
        return this;
    }

<# } #>
<# if (c.GetFeatures().CanSort) { #>
    /**
     * Sets the order by clause for the request
     *
     * @param value the order by clause
     * @return the updated request
     */
    @Nonnull
    public <#=c.TypeCollectionRequest()#> orderBy(@Nonnull final String value) {
        addOrderByOption(value);
        return this;
    }

<# } #>
}
