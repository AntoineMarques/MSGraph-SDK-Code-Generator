<# // Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information. #>
<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ include file="BaseJavaModel.template.tt"#>
<#@ output extension="\\" #>
<#host.TemplateName = c.TypeRequest();#>
<#=writer.WriteHeader()#>
<#=host.CreatePackageDefForBaseMethodRequest()#>
import javax.annotation.Nullable;
import javax.annotation.Nonnull;
<# var importNamespace = host.CurrentModel.GetNamespace().AddPrefix(); #>
import <#=importNamespace#>.concurrency.ICallback;
import <#=importNamespace#>.concurrency.IExecutors;
import <#=importNamespace#>.core.ClientException;
import <#=importNamespace#>.core.IBaseClient;
import <#=importNamespace#>.http.BaseRequest;
import <#=importNamespace#>.http.HttpMethod;

<#=TypeHelperJava.CreateClassDef(c.TypeRequest(), "BaseRequest<"+c.ReturnType()+">")#>

    /**
     * The request for this <#=c.TypeName()#>
     *
     * @param requestUrl     the request URL
     * @param client         the service client
     * @param requestOptions the options for this request
     */
    public <#=c.TypeRequest()#>(@Nonnull final String requestUrl, @Nonnull final <#=TypeHelperJava.IBaseClientType()#> client, @Nullable final java.util.List<? extends <#=importNamespace#>.options.Option> requestOptions) {
        super(requestUrl, client, requestOptions, <#=c.ReturnType()#>.class);
    }

<#
if (c.AsOdcmMethod().IsAction()) {
    if (c.AsOdcmMethod().ReturnType != null) {
#>
    /**
     * Creates the <#=c.TypeName()#>
     *
     * @param callback the callback to be called after success or failure
     */
    public void post(@Nonnull final ICallback<? super <#=c.ReturnType()#>> callback) {
        send(HttpMethod.POST, callback, null);
    }

    /**
     * Creates the <#=c.TypeName()#>
     *
     * @return the <#=c.ReturnType()#>
     * @throws ClientException an exception occurs if there was an error while the request was sent
     */
    @Nullable
    public <#=c.ReturnType()#> post() throws ClientException {
       return send(HttpMethod.POST, null);
    }

<#
        if (c.GetFeatures().CanSelect) {
#>
    /**
     * Sets the select clause for the request
     *
     * @param value the select clause
     * @return the updated request
     */
    @Nonnull
    public <#=c.TypeRequest()#> select(@Nonnull final String value) {
        addSelectOption(value);
        return this;
    }

<#
        }

        if (c.GetFeatures().CanExpand) {
#>
    /**
     * Sets the expand clause for the request
     *
     * @param value the expand clause
     * @return the updated request
     */
    @Nonnull
    public <#=c.TypeRequest()#> expand(@Nonnull final String value) {
        addExpandOption(value);
        return this;
    }

<#
        }

        if (c.AsOdcmProperty() != null && c.AsOdcmProperty().IsCollection && c.GetFeatures().CanUseTop) {
#>

    /**
     * Sets the top value for the request
     *
     * @param value the max number of items to return
     * @return the updated request
     */
    @Nonnull
    public <#=c.TypeRequest()#> top(final int value) {
        addTopOption(value);
        return this;
    }
<#
        }
    } else {
#>
    /**
     * Creates the <#=c.TypeName()#>
     *
     * @param callback the callback to be called after success or failure
     */
    public void post(@Nonnull final ICallback<Void> callback) {
        final IExecutors executors = getClient().getExecutors();
        executors.performOnBackground(new Runnable() {
           @Override
           public void run() {
                try {
                    post();
                    executors.performOnForeground((Void)null, callback);
                } catch (final ClientException e) {
                    executors.performOnForeground(e, callback);
                }
           }
        });
    }

    /**
     * Creates the <#=c.TypeName()#>
     *
     * @throws ClientException an exception occurs if there was an error while the request was sent
     */
    public void post() throws ClientException {
        this.send(HttpMethod.POST, null);
    }
<#
    }
} else { // FUNCTIONS
    if (c.AsOdcmMethod().ReturnType != null) {
        if (c.AsOdcmMethod().IsComposable) {
#>
    /**
     * Patches the <#=c.TypeName()#>
     * @param src<#=c.ReturnType()#> the <#=c.ReturnType()#> with which to PATCH
     * @param callback the callback to be called after success or failure
     */
    public void patch(@Nonnull <#=c.ReturnType()#> src<#=c.ReturnType()#>, @Nonnull final ICallback<? super <#=c.ReturnType()#>> callback) {
        send(HttpMethod.PATCH, callback, src<#=c.ReturnType()#>);
    }

    /**
     * Patches the <#=c.TypeName()#>
     *
     * @param src<#=c.ReturnType()#> the <#=c.ReturnType()#> with which to PATCH
     * @return the <#=c.ReturnType()#>
     * @throws ClientException an exception occurs if there was an error while the request was sent
     */
     @Nullable
     public <#=c.ReturnType()#> patch(@Nonnull final <#=c.ReturnType()#> src<#=c.ReturnType()#>) throws ClientException {
        return this.send(HttpMethod.PATCH, src<#=c.ReturnType()#>);
    }

    /**
     * Puts the <#=c.TypeName()#>
     *
     * @param src<#=c.ReturnType()#> the <#=c.ReturnType()#> to PUT
     * @param callback the callback to be called after success or failure
     */
    public void put(@Nonnull final <#=c.ReturnType()#> src<#=c.ReturnType()#>, @Nonnull final ICallback<? super <#=c.ReturnType()#>> callback) {
        send(HttpMethod.PUT, callback, src<#=c.ReturnType()#>);
    }

    /**
     * Puts the <#=c.TypeName()#>
     *
     * @param src<#=c.ReturnType()#> the <#=c.ReturnType()#> to PUT
     * @return the <#=c.ReturnType()#>
     * @throws ClientException an exception occurs if there was an error while the request was sent
     */
     @Nullable
     public <#=c.ReturnType()#> put(@Nonnull final <#=c.ReturnType()#> src<#=c.ReturnType()#>) throws ClientException {
        return this.send(HttpMethod.PUT, src<#=c.ReturnType()#>);
    }
<#
        }
#>
    /**
     * Gets the <#=c.ReturnType()#>
     *
     * @param callback the callback to be called after success or failure
     */
    public void get(@Nonnull final ICallback<? super <#=c.ReturnType()#>> callback) {
        send(HttpMethod.GET, callback, null);
    }

    /**
     * Gets the <#=c.ReturnType()#>
     *
     * @return the <#=c.ReturnType()#>
     * @throws ClientException an exception occurs if there was an error while the request was sent
     */
    @Nullable
    public <#=c.ReturnType()#> get() throws ClientException {
       return send(HttpMethod.GET, null);
    }

<#
        if (c.GetFeatures().CanSelect) {
#>
    /**
     * Sets the select clause for the request
     *
     * @param value the select clause
     * @return the updated request
     */
    @Nonnull
    public <#=c.TypeRequest()#> select(@Nonnull final String value) {
        addSelectOption(value);
        return this;
    }

<#
        }

        if (c.GetFeatures().CanExpand) {
#>
    /**
     * Sets the expand clause for the request
     *
     * @param value the expand clause
     * @return the updated request
     */
    @Nonnull
    public <#=c.TypeRequest()#> expand(@Nonnull final String value) {
        addExpandOption(value);
        return this;
    }

<#
        }
        if (c.GetFeatures().CanFilter) {
#>
    /**
     * Sets the filter clause for the request
     *
     * @param value the filter clause
     * @return the updated request
     */
    @Nonnull
    public <#=c.TypeRequest()#> filter(@Nonnull final String value) {
        addFilterOption(value);
        return this;
    }

<#
        }
        if (c.GetFeatures().CanSort) {
#>
    /**
     * Sets the order by clause for the request
     *
     * @param value the order by clause
     * @return the updated request
     */
    @Nonnull
    public <#=c.TypeRequest()#> orderBy(@Nonnull final String value) {
        addOrderByOption(value);
        return this;
    }

<#
        }
        if (c.AsOdcmProperty() != null && c.AsOdcmProperty().IsCollection && c.GetFeatures().CanUseTop) {
#>

    /**
     * Sets the top value for the request
     *
     * @param value the max number of items to return
     * @return the updated request
     */
    @Nonnull
    public <#=c.TypeRequest()#> top(final int value) {
        addTopOption(value);
        return this;
    }
<#
        }
    } else {
#>
    public void get(@Nonnull final ICallback<Void> callback) {
        final IExecutors executors = getClient().getExecutors();
        executors.performOnBackground(new Runnable() {
           @Override
           public void run() {
                try {
                    get();
                    executors.performOnForeground((Void)null, callback);
                } catch (final ClientException e) {
                    executors.performOnForeground(e, callback);
                }
           }
        });
    }

    public void get() throws ClientException {
        this.send(HttpMethod.GET, null);
    }
<#
    }
}
#>
}
