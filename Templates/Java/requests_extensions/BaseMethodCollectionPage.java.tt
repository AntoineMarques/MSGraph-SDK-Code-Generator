<# // Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information. #>
<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ include file="BaseJavaModel.template.tt"#>
<#@ output extension="\\" #>
<#host.TemplateName = c.TypeCollectionPage();#>
<#=writer.WriteHeader()#>
<#=host.CreatePackageDef()#>
<# 
	/** 
	* Manual check for deltaLink
	* This allows for a user to get the delta link URL with which 
	* to make future delta query calls to the service. Since it is 
	* not surfaced in the additionalDataManager, we add it manually
	* to the object for easy access.
	*/
	var deltaPage = false;
	if (c.Name == "delta") {
		deltaPage = true;
	}
#>

<# var mainNamespace = host.CurrentNamespace(); #>
<# if (deltaPage) { #>
import <#=mainNamespace#>.http.DeltaCollectionPage;
<# } else { #>
import <#=mainNamespace#>.http.BaseCollectionPage;
<# } #>
<# var importNamespace = host.CurrentModel.GetNamespace().AddPrefix(); #>
import <#=importNamespace#>.<#=TypeHelperJava.GetPrefixForRequests()#>.<#=c.TypeCollectionRequestBuilder()#>;
import <#=importNamespace#>.<#=TypeHelperJava.GetPrefixForRequests()#>.<#=c.TypeCollectionPage()#>;
import <#=importNamespace#>.<#=TypeHelperJava.GetPrefixForRequests()#>.<#=c.TypeCollectionResponse()#>;

<#=TypeHelperJava.CreateClassDef(c.TypeCollectionPage(), (deltaPage ? "DeltaCollectionPage" : "BaseCollectionPage")+"<"+ (c.AsOdcmMethod().ReturnType ?? c.AsOdcmMethod().Class).TypeName() + ", "+c.TypeCollectionRequestBuilder()+">")#>

    /**
     * A collection page for <#=(c as OdcmMethod).OdcmMethodReturnType()#>.
     *
     * @param response The serialized <#=c.TypeCollectionResponse()#> from the service
     * @param builder The request builder for the next collection page
     */
    public <#=c.TypeCollectionPage()#>(final <#=c.TypeCollectionResponse()#> response, final <#=c.TypeCollectionRequestBuilder()#> builder) {
       super(response, builder);
    }

	/**
     * Creates the collection page for <#=c.TypeName()#>
     *
     * @param pageContents       the contents of this page
     * @param nextRequestBuilder the request builder for the next page
     */
    public <#=c.TypeCollectionPage()#>(final java.util.List<<#=(c.AsOdcmMethod().ReturnType ?? c.AsOdcmMethod().Class).TypeName()#>> pageContents, final <#=c.TypeCollectionRequestBuilder()#> nextRequestBuilder) {
        super(pageContents, nextRequestBuilder);
    }
}
