<# // Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information. #>
<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ include file="BaseJavaModel.template.tt"#>
<#@ output extension="\\" #>
<#host.TemplateName = c.TypeCollectionRequestBuilder();#>
<#=writer.WriteHeader()#>
<#=host.CreatePackageDef()#>

<# var mainNamespace = host.CurrentNamespace(); #>
import <#=mainNamespace#>.<#=TypeHelperJava.GetPrefixForRequests()#>.<#=c.TypeCollectionRequestBuilder()#>;
import <#=mainNamespace#>.<#=TypeHelperJava.GetPrefixForRequests()#>.<#=c.TypeRequestBuilder()#>;
import <#=mainNamespace#>.<#=TypeHelperJava.GetPrefixForRequests()#>.<#=c.TypeCollectionRequest()#>;
<#
var currentTypeProjection = c.AsOdcmProperty().Projection.Type.AsOdcmClass();
if (currentTypeProjection != null) {
    foreach (var method in currentTypeProjection.MethodsAndOverloads()) {
        if (!method.IsBoundToCollection) {
            continue;
        }
        if (method.IsCollection) {
#>
import <#=mainNamespace#>.<#=TypeHelperJava.GetPrefixForRequests()#>.<#=method.TypeCollectionRequestBuilder()#>;
<#
        } else {
#>
import <#=mainNamespace#>.<#=TypeHelperJava.GetPrefixForRequests()#>.<#=method.TypeRequestBuilder()#>;
<#
        }
    }
}
#>
<# var importNamespace = host.CurrentModel.GetNamespace().AddPrefix(); #>
import <#=importNamespace#>.http.BaseCollectionRequestBuilder;
import <#=importNamespace#>.core.IBaseClient;

<#=TypeHelperJava.CreateClassDef(c.TypeCollectionRequestBuilder(), "BaseCollectionRequestBuilder<"+c.TypeName()+", "+c.TypeRequestBuilder()+", "+c.TypeCollectionResponse()+", "+c.TypeCollectionPage()+", "+c.TypeCollectionRequest()+">")#>

    /**
     * The request builder for this collection of <#=c.ClassTypeName()#>
     *
     * @param requestUrl     the request URL
     * @param client         the service client
     * @param requestOptions the options for this request
     */
    public <#=c.TypeCollectionRequestBuilder()#>(final String requestUrl, final <#=TypeHelperJava.IBaseClientType()#> client, final java.util.List<? extends <#=importNamespace#>.options.Option> requestOptions) {
        super(requestUrl, client, requestOptions, <#=c.TypeRequestBuilder()#>.class, <#=c.TypeCollectionRequest()#>.class);
    }

<#
	if(host.TemplateName.Equals("DriveItemCollectionRequestBuilder")){
#>
    /**
     * Gets a request builder to the AppRoot folder.
     * @return a request builder to the AppRoot folder
     */
    public DriveItemRequestBuilder appRoot() {
    	return new DriveItemRequestBuilder(this.getRequestUrlWithAdditionalSegment("approot"), this.getClient(), null);
    }
<# } #>

<#
if (currentTypeProjection != null) {
    foreach (var method in currentTypeProjection.MethodsAndOverloads()) {

        if (!method.IsBoundToCollection) {
            continue;
        }

        var parameterList = method.MethodParametersSignature();

        if (parameterList != "") {
            parameterList = parameterList.Remove(0, 2);
        }

        if (method.IsCollection) {
#>

    /**
     * <#=TypeHelperJava.GetSanitizedDescription(method) ?? "Gets a builder to execute the method" #>
     * @return the request builder collection<#=method.MethodParametersJavadocSignature()#>
     */
    public <#=method.TypeCollectionRequestBuilder()#> <#=method.MethodName().ToLowerFirstChar()#>(<#=parameterList#>) {
        return new <#=method.TypeCollectionRequestBuilder()#>(getRequestUrlWithAdditionalSegment("<#=method.MethodFullName()#>"), getClient(), null<#=method.MethodParametersValues()#>);
    }
<#
	// Add a method to support delta query by string (opaque deltaLink)
	if (method.MethodName() == "Delta") {
#>

    /**
     * Gets the list of newly created, updated or deleted <#= c.TypeName() #>
     * 
     * @return a request builder to get the changes
     * @param deltaLink the link returned by the last delta request
     */
	public <#=method.TypeCollectionRequestBuilder()#> <#=method.MethodName().ToLowerFirstChar()#>(final String deltaLink) {
        return new <#=method.TypeCollectionRequestBuilder()#>(deltaLink, getClient(), null<#=method.MethodParametersValues()#>);
    }
<# } #>
<#
        } else {
#>

    /**
     * <#=TypeHelperJava.GetSanitizedDescription(method) ?? "Gets a builder to execute the method" #>
     * @return the request builder <#=method.MethodParametersJavadocSignature()#>
     */
    public <#=method.TypeRequestBuilder()#> <#=method.MethodName().ToLowerFirstChar()#>(<#=parameterList#>) {
        return new <#=method.TypeRequestBuilder()#>(getRequestUrlWithAdditionalSegment("<#=method.MethodFullName()#>"), getClient(), null<#=method.MethodParametersValues()#>);
    }
<#
        }
    }
}
#>
}
