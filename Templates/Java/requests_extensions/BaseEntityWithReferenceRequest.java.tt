<# // Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information. #>
<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ include file="BaseJavaModel.template.tt"#>
<#@ output extension="\\" #>
<#host.TemplateName = c.TypeWithReferencesRequest();#>
<#=writer.WriteHeader()#>
<#=host.CreatePackageDef()#>

<# var importNamespace = host.CurrentModel.GetNamespace().AddPrefix(); #>
import <#=importNamespace#>.options.QueryOption;
import <#=importNamespace#>.http.BaseWithReferenceRequest;
import <#=importNamespace#>.http.HttpMethod;
import <#=importNamespace#>.core.IBaseClient;
import <#=importNamespace#>.serializer.IJsonBackedObject;

<#=TypeHelperJava.CreateClassDef(c.TypeWithReferencesRequest(), "BaseWithReferenceRequest<"+c.ClassTypeName()+">")#>

    /**
     * The request for the <#=c.TypeName()#>
     *
     * @param requestUrl     the request URL
     * @param client         the service client
     * @param requestOptions the options for this request
     */
    public <#=c.TypeWithReferencesRequest()#>(String requestUrl, <#=TypeHelperJava.IBaseClientType()#> client, java.util.List<? extends <#=importNamespace#>.options.Option> requestOptions) {
        super(requestUrl, client, requestOptions, <#=c.ClassTypeName()#>.class);
    }

<# if (c.GetFeatures().CanSelect) { #>
    /**
     * Sets the select clause for the request
     *
     * @param value the select clause
     * @return the updated request
     */
    public <#=c.TypeWithReferencesRequest()#> select(final String value) {
        getQueryOptions().add(new com.microsoft.graph.options.QueryOption("$select", value));
        return this;
    }

<# } #>
<# if (c.GetFeatures().CanExpand) { #>
    /**
     * Sets the expand clause for the request
     *
     * @param value the expand clause
     * @return the updated request
     */
    public <#=c.TypeWithReferencesRequest()#> expand(final String value) {
        getQueryOptions().add(new com.microsoft.graph.options.QueryOption("$expand", value));
        return this;
    }
<# } #>
}
