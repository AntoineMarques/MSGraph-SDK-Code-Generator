<# // Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information. #>
<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ include file="BaseJavaModel.template.tt"#>
<#@ output extension="\\" #>
<#host.TemplateName = c.TypeWithReferencesRequest();#>
<#=writer.WriteHeader()#>
<#=host.CreatePackageDef()#>

<# var importNamespace = host.CurrentModel.GetNamespace().AddPrefix(); #>
import <#=importNamespace#>.options.QueryOption;
import <#=importNamespace#>.http.BaseRequest;
import <#=importNamespace#>.http.HttpMethod;
import <#=importNamespace#>.core.IBaseClient;
import <#=importNamespace#>.serializer.IJsonBackedObject;

<#=TypeHelperJava.CreateClassDef(c.TypeWithReferencesRequest(), "BaseRequest")#>

    /**
     * The request for the <#=c.TypeName()#>
     *
     * @param requestUrl     the request URL
     * @param client         the service client
     * @param requestOptions the options for this request
     */
    public <#=c.TypeWithReferencesRequest()#>(@Nonnull final String requestUrl, @Nonnull final <#=TypeHelperJava.IBaseClientType()#> client, @Nullable final java.util.List<? extends <#=importNamespace#>.options.Option> requestOptions) {
        super(requestUrl, client, requestOptions, <#=c.ClassTypeName()#>.class);
    }

    public void post(@Nonnull final <#=c.TypeName()#> new<#=c.TypeName()#>, @Nullable final IJsonBackedObject payload, @Nonnull final ICallback<? super <#=c.TypeName()#>> callback) {
        send(HttpMethod.POST, callback, payload);
    }

    @Nullable
    public <#=c.TypeName()#> post(@Nonnull final <#=c.TypeName()#> new<#=c.TypeName()#>, @Nullable final IJsonBackedObject payload) throws ClientException {
        IJsonBackedObject response = send(HttpMethod.POST, payload);
        if (response != null){
            return new<#=c.TypeName()#>;
        }
        return null;
    }

    public void get(@Nonnull final ICallback<? super <#=c.TypeName()#>> callback) {
        send(HttpMethod.GET, callback, null);
    }

    @Nullable
    public <#=c.TypeName()#> get() throws ClientException {
       return send(HttpMethod.GET, null);
    }

	public void delete(@Nonnull final ICallback<? super <#=c.TypeName()#>> callback) {
		send(HttpMethod.DELETE, callback, null);
	}

	public void delete() throws ClientException {
		send(HttpMethod.DELETE, null);
	}

	public void patch(@Nonnull final <#=c.TypeName()#> source<#=c.TypeName()#>, @Nonnull final ICallback<? super <#=c.TypeName()#>> callback) {
		send(HttpMethod.PATCH, callback, source<#=c.TypeName()#>);
	}

    @Nullable
	public <#=c.TypeName()#> patch(@Nonnull final <#=c.TypeName()#> source<#=c.TypeName()#>) throws ClientException {
		return send(HttpMethod.PATCH, source<#=c.TypeName()#>);
	}


<# if (c.GetFeatures().CanSelect) { #>
    /**
     * Sets the select clause for the request
     *
     * @param value the select clause
     * @return the updated request
     */
    @Nonnull
    public <#=c.TypeWithReferencesRequest()#> select(@Nonnull final String value) {
        getQueryOptions().add(new com.microsoft.graph.options.QueryOption("$select", value));
        return (<#=c.TypeWithReferencesRequest()#>)this;
    }

<# } #>
<# if (c.GetFeatures().CanExpand) { #>
    /**
     * Sets the expand clause for the request
     *
     * @param value the expand clause
     * @return the updated request
     */
    @Nonnull
    public <#=c.TypeWithReferencesRequest()#> expand(@Nonnull final String value) {
        getQueryOptions().add(new com.microsoft.graph.options.QueryOption("$expand", value));
        return (<#=c.TypeWithReferencesRequest()#>)this;
    }
<# } #>
}
