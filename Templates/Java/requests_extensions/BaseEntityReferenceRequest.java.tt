<# // Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information. #>
<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ include file="BaseJavaModel.template.tt"#>
<#@ output extension="\\" #>
<#host.TemplateName = c.TypeReferenceRequest();#>
<#=writer.WriteHeader()#>
<#=host.CreatePackageDef()#>

<# var importNamespace = host.CurrentModel.GetNamespace().AddPrefix(); #>
import <#=importNamespace#>.options.QueryOption;
import <#=importNamespace#>.http.BaseReferenceRequest;
import <#=importNamespace#>.http.HttpMethod;
import <#=importNamespace#>.core.IBaseClient;

<#=TypeHelperJava.CreateClassDef(c.TypeReferenceRequest(), "BaseReferenceRequest<"+c.TypeName()+">")#>

    /**
     * The request for the <#=c.TypeName()#>
     *
     * @param requestUrl     the request URL
     * @param client         the service client
     * @param requestOptions the options for this request
     */
    public <#=c.TypeReferenceRequest()#>(String requestUrl, <#=TypeHelperJava.IBaseClientType()#> client, java.util.List<? extends <#=importNamespace#>.options.Option> requestOptions) {
        super(requestUrl, client, requestOptions, <#=c.ClassTypeName()#>.class);
    }

<# if (c.GetFeatures().CanSelect) { #>
    /**
     * Sets the select clause for the request
     *
     * @param value the select clause
     * @return the updated request
     */
    public <#=c.TypeReferenceRequest()#> select(final String value) {
        getQueryOptions().add(new com.microsoft.graph.options.QueryOption("$select", value));
        return this;
    }

<# } #>
<# if (c.GetFeatures().CanExpand) { #>
    /**
     * Sets the expand clause for the request
     *
     * @param value the expand clause
     * @return the updated request
     */
    public <#=c.TypeReferenceRequest()#> expand(final String value) {
        getQueryOptions().add(new com.microsoft.graph.options.QueryOption("$expand", value));
        return this;
    }
<# } #>
<# if (c.GetFeatures().CanUpdate) { #>
    /**
     * Puts the <#=c.TypeName()#>
     *
     * @param src<#=c.TypeName()#> the <#=c.TypeName()#> reference to PUT
     * @param callback the callback to be called after success or failure
     */
    public void put(<#=c.TypeName()#> src<#=c.TypeName()#>, final ICallback<? super <#=c.TypeName()#>> callback) {
        send(HttpMethod.PUT, callback, src<#=c.TypeName()#>);
    }

    /**
     * Puts the <#=c.TypeName()#>
     *
     * @param src<#=c.TypeName()#> the <#=c.TypeName()#> reference to PUT
     * @return the <#=c.TypeName()#>
     * @throws ClientException an exception occurs if there was an error while the request was sent
     */
    public <#=c.TypeName()#> put(<#=c.TypeName()#> src<#=c.TypeName()#>) throws ClientException {
        return send(HttpMethod.PUT, src<#=c.TypeName()#>);
    }
<# } #>
}
