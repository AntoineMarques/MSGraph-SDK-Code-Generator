<# // Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information. #>
<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ include file="BaseJavaModel.template.tt"#>
<#@ output extension="\\" #>
<#
    var typeRequest = c.TypeRequest();
    var baseTypeRequest = c.TypeRequest();
    var returnType = c.ReturnType();
    var baseClass = "BaseRequest<"+returnType+">";

    if (c.AsOdcmMethod().IsCollection)
    {
        baseClass = "BaseCollectionRequest<"+c.TypeName()+", "+c.TypeCollectionResponse()+", "+c.TypeCollectionPage()+">";
        typeRequest = c.TypeCollectionRequest();
        baseTypeRequest = c.TypeCollectionRequest();
    }
#>
<#host.TemplateName = baseTypeRequest;#>
<#=writer.WriteHeader()#>
<#=host.CreatePackageDefForBaseMethodBodyRequest()#>
<# var importNamespace = host.CurrentModel.GetNamespace().AddPrefix(); #>
import <#=importNamespace#>.http.BaseCollectionRequest;
import <#=importNamespace#>.http.BaseRequest;
import <#=importNamespace#>.http.HttpMethod;
import <#=importNamespace#>.concurrency.ICallback;
import <#=importNamespace#>.core.ClientException;
import <#=importNamespace#>.core.IBaseClient;
<#
	if (c.AsOdcmMethod().IsCollection) {
#>
import <#=importNamespace#>.concurrency.IExecutors;
<#
	}
#>

<#=TypeHelperJava.CreateClassDef(baseTypeRequest, baseClass)#>
    /** The body for the method */
    protected final <#=c.TypeBody()#> body;

    /**
     * The request for this <#=c.TypeName()#>
     *
     * @param requestUrl     the request URL
     * @param client         the service client
     * @param requestOptions the options for this request
     */
    public <#=baseTypeRequest#>(final String requestUrl, final <#=TypeHelperJava.IBaseClientType()#> client, final java.util.List<? extends <#=importNamespace#>.options.Option> requestOptions) {
<# if (c.AsOdcmMethod().IsCollection) { #>
        super(requestUrl, client, requestOptions, <#=returnType#>.class, <#=c.TypeCollectionPage()#>.class, <#=c.TypeCollectionRequestBuilder() #>.class);
<# } else { #>
        super(requestUrl, client, requestOptions, <#=returnType#>.class);
<# } #>
        body = new <#=c.TypeBody()#>();
    }

    /**
     * Invokes the method and invokes the callback with the result
     * @param callback callback to be invoked after executing the request
     */
    public void post(final ICallback<? super <#=returnType#>> callback) {
        send(HttpMethod.POST, callback, body);
    }

    /**
     * Invokes the method and returns the result
     * @return result of the method invocation
     */
    public <#=returnType#> post() throws ClientException {
        return send(HttpMethod.POST, body);
    }

<# if (c.GetFeatures().CanSelect) { #>
    /**
     * Sets the select clause for the request
     *
     * @param value the select clause
     * @return the updated request
     */
    public <#=typeRequest#> select(final String value) {
        addSelectOption(value);
        return this;
    }

<# } #>
<# if (c.GetFeatures().CanUseTop) { #>
    /**
     * Sets the top value for the request
     *
     * @param value the max number of items to return
     * @return the updated request
     */
    public <#=typeRequest#> top(final int value) {
        addTopOption(value);
        return this;
    }

<# } #>
<# if (c.GetFeatures().CanExpand) { #>
    /**
     * Sets the expand clause for the request
     *
     * @param value the expand clause
     * @return the updated request
     */
    public <#=typeRequest#> expand(final String value) {
        addExpandOption(value);
        return this;
    }

<# } #>
}
