<# // Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information. #>
<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ include file="BaseJavaModel.template.tt"#>
<#@ output extension="\\" #>
<#host.TemplateName = c.TypeRequest();#>
<#=writer.WriteHeader()#>
<#=host.CreatePackageDef()#>
<# var importNamespace = host.CurrentModel.GetNamespace().AddPrefix(); #>
import <#=importNamespace#>.core.IBaseClient;
import <#=importNamespace#>.http.BaseRequest;
import <#=importNamespace#>.http.HttpMethod;

<#=TypeHelperJava.CreateClassDef(c.TypeRequest(), "BaseRequest<"+c.TypeName()+">")#>
	<# if (c.AsOdcmClass() != null && c.AsOdcmClass().Derived.Any()) { #>

    /**
     * The request for the <#=c.TypeName()#>
     *
     * @param requestUrl     the request URL
     * @param client         the service client
     * @param requestOptions the options for this request
     * @param responseClass  the class of the response
     */
    public <#=c.TypeRequest()#>(@Nonnull final String requestUrl,
            @Nonnull final <#=TypeHelperJava.IBaseClientType()#> client,
            @Nullable final java.util.List<? extends <#=importNamespace#>.options.Option> requestOptions,
            @Nonnull final Class<<# if(!host.TemplateName.Equals("EntityRequest")){ #>? extends <#}#><#=c.ClassTypeName()#>> responseClass) {
        super(requestUrl, client, requestOptions, responseClass);
    }
<# } #>

    /**
     * The request for the <#=c.TypeName()#>
     *
     * @param requestUrl     the request URL
     * @param client         the service client
     * @param requestOptions the options for this request
     */
    public <#=c.TypeRequest()#>(@Nonnull final String requestUrl, @Nonnull final <#=TypeHelperJava.IBaseClientType()#> client, @Nullable final java.util.List<? extends <#=importNamespace#>.options.Option> requestOptions) {
        super(requestUrl, client, requestOptions, <#=c.ClassTypeName()#>.class);
    }

<#  if (c.AsOdcmClass().IsAbstract && c.AsOdcmClass().Base == null)
    {
        // Do nothing
    }
    else if (c.AsOdcmClass().Derived.Any() && c.AsOdcmClass().Base != null)
    { #>
<#=getMethods(c)#>
<#=deleteMethods(c)#>
<#=patchMethods(c)#>
<#=postMethods(c)#>
<#=putMethods(c)#>
<#  }
    else if (!c.AsOdcmClass().Derived.Any() && c.AsOdcmClass().Base != null)
    { #>
<#=getMethods(c)#>
<#=deleteMethods(c)#>
<#=patchMethods(c)#>
<#=postMethods(c)#>
<#=putMethods(c)#>
<#  }
    else if (c.AsOdcmClass().Base == null)
    { #>
<#=getMethods(c)#>
<#=deleteMethods(c)#>
<#=patchMethods(c)#>
<#=postMethods(c)#>
<#=putMethods(c)#>
<#  }
    else
    {

    }
#>
<# if (c.GetFeatures().CanSelect) { #>
    /**
     * Sets the select clause for the request
     *
     * @param value the select clause
     * @return the updated request
     */
     @Nonnull
     public <#=c.TypeRequest()#> select(@Nonnull final String value) {
         addSelectOption(value);
         return this;
     }

<# } #>
<# if (c.GetFeatures().CanExpand) { #>
    /**
     * Sets the expand clause for the request
     *
     * @param value the expand clause
     * @return the updated request
     */
     @Nonnull
     public <#=c.TypeRequest()#> expand(@Nonnull final String value) {
         addExpandOption(value);
         return this;
     }

<# } #>
<# if (c.AsOdcmProperty() != null && c.AsOdcmProperty().IsCollection && c.GetFeatures().CanUseTop) { #>

    /**
     * Sets the top value for the request
     *
     * @param value the max number of items to return
     * @return the updated request
     */
     @Nonnull
     public <#=c.TypeRequest()#> top(final int value) {
         addTopOption(value);
         return this;
     }
<# } #>
<# if (c.AsOdcmProperty() != null && c.AsOdcmProperty().IsCollection && c.GetFeatures().CanCount) { #>
    /**
     * Sets the count value for the request
     *
     * @param value whether or not to return the count of objects with the request
     * @return the updated request
     */
    @Nonnull
    public <#=c.TypeRequest()#> count(final boolean value) {
        addCountOption(value);
        return this;
    }
    /**
     * Sets the count value to true for the request
     *
     * @return the updated request
     */
    @Nonnull
    public <#=c.TypeRequest()#> count() {
        addCountOption(true);
        return this;
    }
<# } #>
}
<#=PostProcess(c.TypeRequest())#>
<#+
    public String deleteMethods(OdcmObject c)
    {
        var odcmObject = c.AsOdcmClass();
        var formatString =
@"    /**
     * Delete this item from the service
     *
     * @param callback the callback when the deletion action has completed
     */
    public void delete(@Nonnull final ICallback<? super {0}> callback) {{
        send(HttpMethod.DELETE, callback, null);
    }}

    /**
     * Delete this item from the service
     *
     * @throws ClientException if there was an exception during the delete operation
     */
    public void delete() throws ClientException {{
        send(HttpMethod.DELETE, null);
    }}
";
        return string.Format(formatString, odcmObject.TypeName());
    }

    public string getMethods(OdcmObject c)
    {
        var odcmObject = c.AsOdcmClass();
        var formatString =
@"    /**
     * Gets the {0} from the service
     *
     * @param callback the callback to be called after success or failure
     */
    public void get(@Nonnull final ICallback<? super {0}> callback) {{
        send(HttpMethod.GET, callback, null);
    }}

    /**
     * Gets the {0} from the service
     *
     * @return the {0} from the request
     * @throws ClientException this exception occurs if the request was unable to complete for any reason
     */
    @Nullable
    public {0} get() throws ClientException {{
       return send(HttpMethod.GET, null);
    }}
";
        return string.Format(formatString, odcmObject.TypeName(), odcmObject.Derived.Any() ? odcmObject.TypeName() : string.Empty);
    }

    public string patchMethods(OdcmObject c)
    {
        var odcmObject = c.AsOdcmClass();
        var formatString =
@"    /**
     * Patches this {0} with a source
     *
     * @param source{0} the source object with updates
     * @param callback the callback to be called after success or failure
     */
    public void patch(@Nonnull final {0} source{0}, @Nonnull final ICallback<? super {0}> callback) {{
        send(HttpMethod.PATCH, callback, source{0});
    }}

    /**
     * Patches this {0} with a source
     *
     * @param source{0} the source object with updates
     * @return the updated {0}
     * @throws ClientException this exception occurs if the request was unable to complete for any reason
     */
    @Nullable
    public {0} patch(@Nonnull final {0} source{0}) throws ClientException {{
        return send(HttpMethod.PATCH, source{0});
    }}
";
        return string.Format(formatString, odcmObject.TypeName());
    }

    public string postMethods(OdcmObject c)
    {
        var odcmObject = c.AsOdcmClass();
        var formatString =
@"    /**
     * Creates a {0} with a new object
     *
     * @param new{0} the new object to create
     * @param callback the callback to be called after success or failure
     */
    public void post(@Nonnull final {0} new{0}, @Nonnull final ICallback<? super {0}> callback) {{
        send(HttpMethod.POST, callback, new{0});
    }}

    /**
     * Creates a {0} with a new object
     *
     * @param new{0} the new object to create
     * @return the created {0}
     * @throws ClientException this exception occurs if the request was unable to complete for any reason
     */
    @Nullable
    public {0} post(@Nonnull final {0} new{0}) throws ClientException {{
        return send(HttpMethod.POST, new{0});
    }}
";
        return string.Format(formatString, odcmObject.TypeName());
    }

    public string putMethods(OdcmObject c)
    {
        var odcmObject = c.AsOdcmClass();
        var formatString =
@"    /**
     * Creates a {0} with a new object
     *
     * @param new{0} the object to create/update
     * @param callback the callback to be called after success or failure
     */
    public void put(@Nonnull final {0} new{0}, @Nonnull final ICallback<? super {0}> callback) {{
        send(HttpMethod.PUT, callback, new{0});
    }}

    /**
     * Creates a {0} with a new object
     *
     * @param new{0} the object to create/update
     * @return the created {0}
     * @throws ClientException this exception occurs if the request was unable to complete for any reason
     */
    @Nullable
    public {0} put(@Nonnull final {0} new{0}) throws ClientException {{
        return send(HttpMethod.PUT, new{0});
    }}
";
        return string.Format(formatString, odcmObject.TypeName());
    }
 #>
