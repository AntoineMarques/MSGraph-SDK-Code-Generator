<# // Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information. #>
<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ include file="BaseJavaModel.template.tt"#>
<#@ output extension="\\" #>
<#host.TemplateName = c.TypeCollectionRequestBuilder();#>
<#=writer.WriteHeader()#>
<#=host.CreatePackageDef()#>

<# var mainNamespace = host.CurrentNamespace(); #>
import <#=mainNamespace#>.<#=TypeHelperJava.GetPrefixForRequests()#>.<#=c.TypeCollectionRequestBuilder()#>;
import <#=mainNamespace#>.<#=TypeHelperJava.GetPrefixForRequests()#>.<#=c.TypeCollectionRequest()#>;
import <#=mainNamespace#>.<#=TypeHelperJava.GetPrefixForRequests()#>.<#=c.TypeCollectionResponse()#>;
<# var importNamespace = host.CurrentModel.GetNamespace().AddPrefix(); #>
import <#=importNamespace#>.options.FunctionOption;
import <#=importNamespace#>.core.IBaseClient;
import <#=importNamespace#>.http.<#= (c.AsOdcmMethod().IsFunction ? "BaseFunctionCollectionRequestBuilder" : "BaseActionCollectionRequestBuilder") #>;

<# bool isAction = !c.AsOdcmMethod().IsFunction; #>
<#=TypeHelperJava.CreateClassDef(c.TypeCollectionRequestBuilder(), c.GetMethodCollectionRequestBuilderSuperClass())#>

<# foreach (var method in c.AsOdcmMethod().WithOverloads()) { #>
    /**
     * The request builder for this collection of <#=c.ClassTypeName()#>
     *
     * @param requestUrl     the request URL
     * @param client         the service client
     * @param requestOptions the options for this request<#=method.MethodParametersJavadocSignature()#>
     */
    public <#=c.TypeCollectionRequestBuilder()#>(final String requestUrl, final <#=TypeHelperJava.IBaseClientType()#> client, final java.util.List<? extends <#=importNamespace#>.options.Option> requestOptions<#=method.MethodParametersSignature()#>) {
        super(requestUrl, client, requestOptions, <#=c.TypeCollectionRequestBuilder()#>.class, <#=c.TypeCollectionResponse()#>.class, <#=c.TypeCollectionPage()#>.class, <#=c.TypeCollectionRequest()#>.class);
<# foreach (var p in method.Parameters) { #>
  <# if (isAction) { #>
	 if(<#=p.ParamName()#>!=null){
			bodyParams.put("<#=p.ParamName()#>", <#=p.ParamName()#>);
		}
  <# } else { #>
   	 if(<#=p.ParamName()#>!=null){
			functionOptions.add(new com.microsoft.graph.options.FunctionOption("<#=p.ParamName()#>", <#=p.ParamName()#>));
		}
  <# } #>
<# } #>
    }
<# } #>
    
    /**
     * Creates the request
     *
     * @param requestOptions the options for this request
     * @return the <#=c.TypeCollectionRequest()#> instance
     */
     @Override
    public <#= c.TypeCollectionRequest()#> buildRequest(final java.util.List<? extends <#=importNamespace#>.options.Option> requestOptions) {
        final <#= c.TypeCollectionRequest()#> request = super.buildRequest(requestOptions);

<# if (isAction) { #>
  <# foreach (var p in c.AsOdcmMethod().Parameters) { #>
      if (hasParameter("<#=p.ParamName()#>")) {
            request.body.<#=p.ParamName()#> = getParameter("<#=p.ParamName()#>");
        }
  <# } #>
<# } else { #>
      for (com.microsoft.graph.options.FunctionOption option : functionOptions) {
            request.addFunctionOption(option);
      }
<# } #>

        return request;
    }
}
