<# // Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information. #>
<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ include file="BaseJavaModel.template.tt"#>
<#@ output extension="\\" #>
<#host.TemplateName = c.TypeRequestBuilder();#>
<#=writer.WriteHeader()#>
<#=host.CreatePackageDefForBaseMethodRequestBuilder()#>
<# var importNamespace = host.CurrentModel.GetNamespace().AddPrefix(); #>
import <#=importNamespace#>.core.BaseActionRequestBuilder;
import <#=importNamespace#>.core.BaseFunctionRequestBuilder;
import <#=importNamespace#>.core.IBaseClient;
import com.google.gson.JsonElement;
import javax.annotation.Nullable;
import javax.annotation.Nonnull;

<# bool isAction = !c.AsOdcmMethod().IsFunction; #>
<#=TypeHelperJava.CreateClassDef(c.TypeRequestBuilder(), c.GetMethodRequestBuilderSuperClass())#>

<# foreach (var method in c.AsOdcmMethod().WithDistinctOverloads()) { #>
    /**
     * The request builder for this <#=c.TypeName()#>
     *
     * @param requestUrl     the request URL
     * @param client         the service client
     * @param requestOptions the options for this request<#=method.MethodParametersJavadocSignature()#>
     */
    public <#=c.TypeRequestBuilder()#>(@Nonnull final String requestUrl, @Nonnull final <#=TypeHelperJava.IBaseClientType()#> client, @Nullable final java.util.List<? extends <#=importNamespace#>.options.Option> requestOptions<#=method.MethodParametersSignature()#>) {
        super(requestUrl, client, requestOptions);
<#     foreach (var p in method.Parameters) { #>
<#         if (isAction) { #>
        bodyParams.put("<#=p.ParamName()#>", <#=p.ParamName()#>);
<#         } else { #>
        functionOptions.add(new com.microsoft.graph.options.FunctionOption("<#=p.ParamName()#>", <#=p.ParamName()#>));
<#         } #>
<#     } #>
    }
<# } #>

    /**
     * Creates the <#=c.TypeRequest()#>
     *
     * @param requestOptions the options for the request
     * @return the <#=c.TypeRequest()#> instance
     */
    @Nonnull
    public <#=c.TypeRequest()#> buildRequest(@Nullable final com.microsoft.graph.options.Option... requestOptions) {
        return buildRequest(getOptions(requestOptions));
    }

    /**
     * Creates the <#=c.TypeRequest()#> with specific requestOptions instead of the existing requestOptions
     *
     * @param requestOptions the options for the request
     * @return the <#=c.TypeRequest()#> instance
     */
    @Nonnull
    public <#=c.TypeRequest()#> buildRequest(@Nonnull final java.util.List<? extends <#=importNamespace#>.options.Option> requestOptions) {
        <#=c.TypeRequest()#> request = new <#=c.TypeRequest()#>(
                getRequestUrl(),
                getClient(),
                requestOptions
        );

<# if (isAction) { #>
<#   foreach (var p in c.AsOdcmMethod().Parameters) { #>
        if (hasParameter("<#=p.ParamName()#>")) {
            request.body.<#=p.ParamName()#> = getParameter("<#=p.ParamName()#>");
        }

<#   } #>
<# } else { #>
      for (com.microsoft.graph.options.FunctionOption option : functionOptions) {
            request.addFunctionOption(option);
      }

<# } #>
        return request;
    }
<# 
var m = c as OdcmMethod;
if(m != null && m.IsComposable && m.ReturnType != null && m.ReturnType is OdcmClass) {
    foreach(var prop in m.ReturnType.AsOdcmClass().NavigationProperties(true))
    {
        var propName = prop.Name.ToUpperFirstChar();
		var sanitizedProperty = propName.SanitizePropertyName().ToLowerFirstChar();
        var propRequestBuilder = prop.TypeRequestBuilder();
        if (prop.IsCollection()) {
#>
    @Nonnull
    public <#=prop.TypeCollectionRequestBuilder()#> <#=sanitizedProperty#>() {
        return new <#=prop.TypeCollectionRequestBuilder()#>(getRequestUrlWithAdditionalSegment("<#=prop.ParentPropertyType == null ? prop.Name : prop.ParentPropertyType.Name #>")<# if(prop.ParentPropertyType != null) { #> + "/<#=prop.Projection.Type.FullName#>"<# } #>, getClient(), null);
    }

    @Nonnull
    public <#=prop.TypeRequestBuilder()#> <#=sanitizedProperty#>(@Nonnull final String id) {
        return new <#=prop.TypeRequestBuilder()#>(getRequestUrlWithAdditionalSegment("<#=prop.ParentPropertyType == null ? prop.Name : prop.ParentPropertyType.Name #>") + "/" + id<# if(prop.ParentPropertyType != null) { #> + "/<#=prop.Projection.Type.FullName#>"<# } #>, getClient(), null);
    }
<#
        } else {
#>

    /**
     * Gets the request builder for <#=prop.TypeName()#>
     *
     * @return the <#=prop.TypeRequestBuilder()#> instance
     */
    @Nonnull
    public <#=prop.TypeRequestBuilder()#> <#=sanitizedProperty#>() {
        return new <#=prop.TypeRequestBuilder()#>(getRequestUrlWithAdditionalSegment("<#=prop.Name#>"), getClient(), null);
    }
<#
        }
    }
} #>
}
