<# // Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information. #>
<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ include file="BaseJavaModel.template.tt"#>
<#@ output extension="\\" #>
<#host.TemplateName = c.TypeReferenceRequest();#>
<#=writer.WriteHeader()#>
<#=host.CreatePackageDef()#>

<# var importNamespace = host.CurrentModel.GetNamespace().AddPrefix(); #>
import <#=importNamespace#>.options.QueryOption;
import <#=importNamespace#>.http.BaseReferenceRequest;
import <#=importNamespace#>.http.HttpMethod;
import <#=importNamespace#>.core.IBaseClient;
import com.google.gson.JsonPrimitive;
import com.google.gson.JsonObject;

<#=TypeHelperJava.CreateClassDef(c.TypeReferenceRequest(), "BaseReferenceRequest<"+c.TypeName()+">", null, c.Deprecation?.Description)#>

    /**
     * The request for the <#=c.TypeName()#>
     *
     * @param requestUrl     the request URL
     * @param client         the service client
     * @param requestOptions the options for this request
     */
    public <#=c.TypeReferenceRequest()#>(@Nonnull final String requestUrl, @Nonnull final <#=c.IBaseClientType()#><?> client, @Nullable final java.util.List<? extends <#=importNamespace#>.options.Option> requestOptions) {
        super(requestUrl, client, requestOptions, <#=c.ClassTypeName()#>.class);
    }

<# if (c.GetFeatures().CanSelect) { #>
    /**
     * Sets the select clause for the request
     *
     * @param value the select clause
     * @return the updated request
     */
    @Nonnull
    public <#=c.TypeReferenceRequest()#> select(@Nonnull final String value) {
        addSelectOption(value);
        return this;
    }

<# } #>
<# if (c.GetFeatures().CanExpand) { #>
    /**
     * Sets the expand clause for the request
     *
     * @param value the expand clause
     * @return the updated request
     */
    @Nonnull
    public <#=c.TypeReferenceRequest()#> expand(@Nonnull final String value) {
        addExpandOption(value);
        return this;
    }
<# } #>
<# if (c.GetFeatures().CanUpdate && c.ShouldIncludeReferenceUpdateMethods(host.CurrentModel)) { #>
    /**
     * Puts the <#=c.TypeName()#>
     *
     * @param src<#=c.TypeName()#> the <#=c.TypeName()#> reference to PUT
     * @return a future with the result
     */
    @Nonnull
    public java.util.concurrent.CompletableFuture<<#=c.TypeName()#>> putAsync(@Nonnull final <#=c.TypeName()#> src<#=c.TypeName()#>) {
        final JsonObject payload = new JsonObject();
        payload.add("@odata.id", new JsonPrimitive(this.getClient().getServiceRoot() + "<#=c.CanonicalPath(host.CurrentModel)#>/" + src<#=c.TypeName()#>.id));
        return sendAsync(HttpMethod.PUT, payload);
    }

    /**
     * Puts the <#=c.TypeName()#>
     *
     * @param src<#=c.TypeName()#> the <#=c.TypeName()#> reference to PUT
     * @return the <#=c.TypeName()#>
     * @throws ClientException an exception occurs if there was an error while the request was sent
     */
    @Nullable
    public <#=c.TypeName()#> put(@Nonnull final <#=c.TypeName()#> src<#=c.TypeName()#>) throws ClientException {
        final JsonObject payload = new JsonObject();
        payload.add("@odata.id", new JsonPrimitive(this.getClient().getServiceRoot() + "<#=c.CanonicalPath(host.CurrentModel)#>/" + src<#=c.TypeName()#>.id));
        return send(HttpMethod.PUT, payload);
    }
<# } #>
}
