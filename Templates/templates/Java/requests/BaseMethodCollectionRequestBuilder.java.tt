<# // Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information. #>
<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ include file="BaseJavaModel.template.tt"#>
<#@ output extension="\\" #>
<#host.TemplateName = c.TypeCollectionRequestBuilder();#>
<#=writer.WriteHeader()#>
<#=host.CreatePackageDef()#>

<# var mainNamespace = host.CurrentNamespace(); #>
import <#=mainNamespace#>.<#=TypeHelperJava.GetPrefixForRequests()#>.<#=c.TypeCollectionRequestBuilder()#>;
import <#=mainNamespace#>.<#=TypeHelperJava.GetPrefixForRequests()#>.<#=c.TypeCollectionRequest()#>;
import <#=mainNamespace#>.<#=TypeHelperJava.GetPrefixForRequests()#>.<#=c.TypeCollectionResponse()#>;
<#
foreach (var method in c.AsOdcmMethod().WithOverloads().Where(x => x.MethodHasParameters()).Select(x => mainNamespace + "." + c.GetPackagePrefix() + "." + x.TypeParameterSet()).Distinct()) {
#>
import <#=method#>;
<# } #>
<# var importNamespace = host.CurrentModel.GetNamespace().AddPrefix(); #>
import <#=importNamespace#>.options.FunctionOption;
import <#=importNamespace#>.core.IBaseClient;
import <#=importNamespace#>.http.<#= (c.AsOdcmMethod().IsFunction ? "BaseFunctionCollectionRequestBuilder" : "BaseActionCollectionRequestBuilder") #>;

<# bool isAction = !c.AsOdcmMethod().IsFunction; #>
<# bool addParameters = false; #>
<#=TypeHelperJava.CreateClassDef(c.TypeCollectionRequestBuilder(), c.GetMethodCollectionRequestBuilderSuperClass(), null, c.Deprecation?.Description)#>

<#if(c.AsOdcmMethod().WithOverloadsOfDistinctName().All(x => x.MethodHasParameters())) { #>
    /**
     * The request builder for this collection of <#=c.ClassTypeName()#>
     *
     * @param requestUrl     the request URL
     * @param client         the service client
     * @param requestOptions the options for this request
     */
    public <#=c.TypeCollectionRequestBuilder()#>(@Nonnull final String requestUrl, @Nonnull final <#=c.IBaseClientType()#><?> client, @Nullable final java.util.List<? extends <#=importNamespace#>.options.Option> requestOptions) {
        super(requestUrl, client, requestOptions, <#=c.TypeCollectionRequestBuilder()#>.class, <#=c.TypeCollectionRequest()#>.class);
    }
<# } #>
<#if(c.AsOdcmMethod().WithOverloadsOfDistinctName().Any(x => x.MethodHasParameters()) && isAction) { #>
    private <#=c.AsOdcmMethod().TypeParameterSet() #> body;
<# } #>
<# foreach (var method in c.AsOdcmMethod().WithOverloadsOfDistinctName()) { #>
    /**
     * The request builder for this collection of <#=c.ClassTypeName()#>
     *
     * @param requestUrl     the request URL
     * @param client         the service client
     * @param requestOptions the options for this request
<#if(method.MethodHasParameters()) { #>
<#addParameters = true;#>
     * @param parameters     the parameters for the service method
<# } #>
     */
    public <#=c.TypeCollectionRequestBuilder()#>(@Nonnull final String requestUrl, @Nonnull final <#=c.IBaseClientType()#><?> client, @Nullable final java.util.List<? extends <#=importNamespace#>.options.Option> requestOptions<#if(method.MethodHasParameters()) { #>, @Nonnull final <#=method.TypeParameterSet()#> parameters<# } #>) {
        super(requestUrl, client, requestOptions, <#=c.TypeCollectionRequestBuilder()#>.class, <#=c.TypeCollectionRequest()#>.class);
<#if(method.MethodHasParameters()) { #>
<# if (isAction) { #>
        this.body = parameters;
<# } else { #>
        if(parameters != null) {
            functionOptions = parameters.getFunctionOptions();
        }
<#     }
    }
#>
    }
<# } #>
    /**
     * Creates the request
     *
     * @param requestOptions the options for this request
     * @return the <#=c.TypeCollectionRequest()#> instance
     */
    @Override
    @Nonnull
    public <#= c.TypeCollectionRequest()#> buildRequest(@Nullable final java.util.List<? extends <#=importNamespace#>.options.Option> requestOptions) {
        final <#= c.TypeCollectionRequest()#> request = super.buildRequest(requestOptions);
<#if(addParameters) { #>
    <# if (isAction) { #>
        request.body = this.body;
    <# } else { #>
    if(functionOptions != null) {    
            for (com.microsoft.graph.options.FunctionOption option : functionOptions) {
                request.addFunctionOption(option);
            }
        }
<#      }
    }#>
        return request;
    }
}
