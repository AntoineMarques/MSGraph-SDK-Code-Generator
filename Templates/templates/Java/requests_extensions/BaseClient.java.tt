<# // Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information. #>
<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ include file="BaseJavaModel.template.tt"#>
<#@ output extension="\\" #>
<#=writer.WriteHeader()#>
<#=host.CreatePackageDef()#>
<# var importNamespace = host.CurrentModel.GetNamespace().AddPrefix(); #>
import <#=importNamespace#>.core.IBaseClient;
import <#=importNamespace#>.core.BaseClient;

<#=TypeHelperJava.CreateClassDef(c.TypeName() + "Client", c.BaseClientType(), importNamespace + ".models.extensions.I" + c.TypeName() + "Client", c.Deprecation?.Description)#>
    /**
     * Restricted constructor
     */
    protected GraphServiceClient() {
        setServiceRoot("<#=ConfigurationService.Settings.DefaultBaseEndpointUrl#>");
    }
<#
foreach (var prop in model.EntityContainer.Properties)
{
    var propertyName = prop.Name.ToUpperFirstChar();
    if (prop.IsCollection())
    {
#>

    /**
     * Gets the collection of <#=propertyName#> objects
     *
     * @return the request builder for the collection of <#=propertyName#> objects
<# if(prop.IsDeprecated) {#>
     * @deprecated <#= prop?.Deprecation?.Description #>
<# } #>
     */
<# if(prop.IsDeprecated) {#>
    @Deprecated
<# } #>
    @Nonnull
    public <#=prop.TypeCollectionRequestBuilder()#> <#=prop.Name#>() {
        return new <#=prop.TypeCollectionRequestBuilder()#>(getServiceRoot() + "/<#=prop.Name#>", this, null);
    }

    /**
     * Gets a single <#=propertyName#>
     *
     * @param id the id of the <#=propertyName#> to retrieve
     * @return the request builder for the <#=propertyName#> object
<# if(prop.IsDeprecated) {#>
     * @deprecated <#= prop?.Deprecation?.Description #>
<# } #>
     */
<# if(prop.IsDeprecated) {#>
    @Deprecated
<# } #>
    @Nonnull
    public <#=prop.TypeRequestBuilder()#> <#=prop.Name#>(@Nonnull final String id) {
        return new <#=prop.TypeRequestBuilder()#>(getServiceRoot() + "/<#=prop.Name#>/" + id, this, null);
    }
<#
    }
    else
    {
#>

    /**
     * Gets the <#=c.TypeRequestBuilder()#>
     *
     * @return the <#=prop.Projection.Type.GetTypeString()#>
<# if(prop.IsDeprecated) {#>
     * @deprecated <#= prop?.Deprecation?.Description #>
<# } #>
     */
<# if(prop.IsDeprecated) {#>
    @Deprecated
<# } #>
    @Nonnull
    public <#=prop.TypeRequestBuilder()#> <#=prop.Name#>() {
        return new <#=prop.TypeRequestBuilder()#>(getServiceRoot() + "/<#=prop.Name#>", this, null);
    }
<#
    }
}
#>
}
