<# // Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information. #>
<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ include file="BaseJavaModel.template.tt"#>
<#@ output extension="\\" #>
<#=writer.WriteHeader()#>
<#=host.CreatePackageDef()#>
<# var importNamespace = host.CurrentModel.GetNamespace().AddPrefix(); #>
import <#=importNamespace#>.core.IBaseClient;
import <#=importNamespace#>.core.BaseClient;

<#=TypeHelperJava.CreateClassDef(c.TypeName() + "Client", c.BaseClientType(), "IBaseClient", c.Deprecation?.Description)#>
    /**
     * Restricted constructor
     */
    protected GraphServiceClient() {
        setServiceRoot("<#=ConfigurationService.Settings.DefaultBaseEndpointUrl#>");
    }
    /**
     * Gets the builder to start configuring the client
     *
     * @return builder to start configuring the client
     */
    @Nonnull
    public static Builder<OkHttpClient> builder() {
        return new Builder<>();
    }
    public static class Builder<httpClientType> extends BaseClient.Builder<httpClientType> {
        /**
         * Sets the serializer.
         *
         * @param serializer
         *            the serializer
         * @return the instance of this builder
         */
        @Nonnull
        @Override
        public Builder<httpClientType> serializer(@Nonnull final ISerializer serializer) {
            super.serializer(serializer);
            return this;
        }

        /**
         * Sets the httpProvider
         *
         * @param httpProvider
         *            the httpProvider
         * @return the instance of this builder
         */
        @Nonnull
        @Override
        public Builder<httpClientType> httpProvider(@Nonnull final IHttpProvider httpProvider) {
            super.httpProvider(httpProvider);
            return this;
        }

        /**
         * Sets the logger
         *
         * @param logger
         *            the logger
         * @return the instance of this builder
         */
        @Nonnull
        @Override
        public Builder<httpClientType> logger(@Nonnull final ILogger logger) {
            super.logger(logger);
            return this;
        }

        /**
         * Sets the http client
         *
         * @param client the http client
         *
         * @return the instance of this builder
         */
        @Nonnull
        @Override
        public Builder<httpClientType> httpClient(@Nonnull final httpClientType client) {
            super.httpClient(client);
            return this;
        }

        /**
         * Sets the authentication provider
         *
         * @param auth the authentication provider
         * @return the instance of this builder
         */
        @Nonnull
        @Override
        public Builder<httpClientType> authenticationProvider(@Nonnull final ICoreAuthenticationProvider auth) {
            super.authenticationProvider(auth);
            return this;
        }

        /**
         * Builds and returns the Graph service client.
         *
         * @return the Graph service client object
         * @throws ClientException
         *             if there was an exception creating the client
         */
        @Nonnull
        @Override
        public GraphServiceClient buildClient() throws ClientException {
            return buildClient(new GraphServiceClient());
        }
    }
<#
foreach (var prop in model.EntityContainer.Properties)
{
    var propertyName = prop.Name.ToUpperFirstChar();
    if (prop.IsCollection())
    {
#>

    /**
     * Gets the collection of <#=propertyName#> objects
     *
     * @return the request builder for the collection of <#=propertyName#> objects
<# if(prop.IsDeprecated) {#>
     * @deprecated <#= prop?.Deprecation?.Description #>
<# } #>
     */
<# if(prop.IsDeprecated) {#>
    @Deprecated
<# } #>
    @Nonnull
    public <#=prop.TypeCollectionRequestBuilder()#> <#=prop.Name#>() {
        return new <#=prop.TypeCollectionRequestBuilder()#>(getServiceRoot() + "/<#=prop.Name#>", this, null);
    }

    /**
     * Gets a single <#=propertyName#>
     *
     * @param id the id of the <#=propertyName#> to retrieve
     * @return the request builder for the <#=propertyName#> object
<# if(prop.IsDeprecated) {#>
     * @deprecated <#= prop?.Deprecation?.Description #>
<# } #>
     */
<# if(prop.IsDeprecated) {#>
    @Deprecated
<# } #>
    @Nonnull
    public <#=prop.TypeRequestBuilder()#> <#=prop.Name#>(@Nonnull final String id) {
        return new <#=prop.TypeRequestBuilder()#>(getServiceRoot() + "/<#=prop.Name#>/" + id, this, null);
    }
<#
    }
    else
    {
#>

    /**
     * Gets the <#=c.TypeRequestBuilder()#>
     *
     * @return the <#=prop.Projection.Type.GetTypeString()#>
<# if(prop.IsDeprecated) {#>
     * @deprecated <#= prop?.Deprecation?.Description #>
<# } #>
     */
<# if(prop.IsDeprecated) {#>
    @Deprecated
<# } #>
    @Nonnull
    public <#=prop.TypeRequestBuilder()#> <#=prop.Name#>() {
        return new <#=prop.TypeRequestBuilder()#>(getServiceRoot() + "/<#=prop.Name#>", this, null);
    }
<#
    }
}
#>
}
