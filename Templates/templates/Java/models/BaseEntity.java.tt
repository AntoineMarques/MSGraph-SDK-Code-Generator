<# // Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information. #>
<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ include file="BaseJavaModel.template.tt"#>
<#@ output extension="\\" #>
<#host.TemplateName = c.TypeName();#>
<#=writer.WriteHeader()#>
<#=host.CreatePackageDefForEntity()#>

import com.google.gson.JsonObject;
import com.google.gson.annotations.SerializedName;
import com.google.gson.annotations.Expose;
import javax.annotation.Nullable;
import javax.annotation.Nonnull;
<# if(((OdcmClass)c).IsOpen && !((OdcmClass)c).Properties.Any()) { #>
import java.util.HashMap;
<# } #>

<#=TypeHelperJava.CreateClassDef(c.TypeName(), c.BaseClassName(), c.TypeName().Equals("UploadSession") ? "IJsonBackedObject, com.microsoft.graph.concurrency.IUploadSession" : "IJsonBackedObject", c.Deprecation?.Description)#>

<#
    if(((OdcmClass)c).Base == null){
#>
    /** the OData type of the object as returned by the service */
    @SerializedName("@odata.type")
    @Expose
    @Nullable
    public String oDataType;

    private transient AdditionalDataManager additionalDataManager = new AdditionalDataManager(this);

    @Override
    @Nonnull
    public final AdditionalDataManager additionalDataManager() {
        return additionalDataManager;
    }
<#
    }
#>

<#=TypeHelperJava.CreatePropertyDef(((OdcmClass)c).Properties, c is OdcmComplexClass)#>
<#=TypeHelperJava.CreateRawJsonObject()#>
<#=TypeHelperJava.UpdatePropertiesWithinSetRawObject(((OdcmClass)c).Properties, c is OdcmComplexClass)#>
<# if(c.TypeName().Equals("UploadSession")) {#>
    /**
     * Gets the Upload Url.
     * The URL endpoint that accepts PUT requests for byte ranges of the file.
     * @return the upload Url
     */
    @Nullable
    @Override
    public String getUploadUrl() {
        return uploadUrl;
    }
    /**
     * Gets the Next Expected Ranges.
     * A collection of byte ranges that the server is missing for the file. These ranges are zero indexed and of the format 'start-end' (e.g. '0-26' to indicate the first 27 bytes of the file). When uploading files as Outlook attachments, instead of a collection of ranges, this property always indicates a single value '{start}', the location in the file where the next upload should begin.
     * @return the Next Expected Ranges.
     */
    @Nullable
    @Override
    public java.util.List<String> getNextExpectedRanges() {
        return nextExpectedRanges;
    }
<#}#>
<#=PostProcess(c.TypeName())#>}
